{"version":3,"sources":["components/Loot.js","components/Monster.js","components/MonsterModal.js","components/Tiles.js","components/Navbar.js","App.js","fonts/osrs-font.woff","index.js"],"names":["Loot","drops","useState","loot","setLoot","counter","setCounter","autokill","multiplier","setMultiplier","rollQuantity","monsterQuantity","currQuantity","lowHigh","split","length","min","parseInt","max","quantity","Math","floor","random","console","log","setTimeout","document","getElementById","click","className","class","type","id","value","onChange","for","htmlFor","event","target","onClick","existedLoot","updatedQuantity","newLoot","stillSearching","tempCounter","multi","prevLoot","i","rarity","name","includes","find","l","updatedLoot","map","loo","generateLoot","sort","a","b","price","drop","toString","concat","src","alt","Monster","monster","imgSrc","examine","MonsterModal","role","Tiles","monsters","href","Navbar","MONSTERS","gql","App","search","setSearch","useLazyQuery","getMonsters","loading","data","error","useEffect","monstersToShow","filter","toLowerCase","placeholder","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","ReactDOM","render","ApolloProvider"],"mappings":"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","file":"static/js/main.26a6ae44.chunk.js","sourcesContent":["//button + generate loot\r\nimport React, { useState } from \"react\"\r\n\r\n//can get image icon from api instead of link eventually\r\n/*<img\r\nsrc=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAACQAAAAgCAYAAAB6kdqOAAACGUlEQVR4Xu2Uay8jYRTHPd/ER9i3sl/DG/tCvCESIosEESuItS6LutWlS1HUZdHtbtelbUqKplTpJRrSNBtf5C/nTGbMtJXtRZkX80uedKZnZs7//M95nrIyAwMDXSIgLV0gcLy/j2893Wmi3k2gwJnbjZnvIyzoQ3k5/25ZrW/tmtwmgSu/H7b5Oc394e6ucl9iYVKCZCKByOUlzj0ebpllchIdzc0ce4jHceH14pd9A4vT01naWTDqCqUVOj/DycFf7NlsWLMswGo2sxg5LreMHBrt70fb5ybUfKpSxQpG4F8yiXg4jIDPB9fONlZmZzE+MICRvj6YBgc1QimZLCZ4eoLO1tYX4kUh2U+t6G5vx9cvXUqCcCCQZU4EUg/37JpaxCuJkREaN2QXHlMp3AaDcDsc7CA5SY56nE5llv6/CkJg44dFUzFdkxj/0RG2l5fhc7nYsdh1iFtqHhvl+aKhphjtukQkwkXQ80O9PcpcpWfLkfQZEOzEz9VVLEyY2EFKQoNO7tD1nGmcC3Fu2uH985tddKyvZbhdcCszX9TaTwlpztL/Vy86Cui8amloUARpv1kk6hbSDlRXnW1RnM6tjxUVpRD0XDm1r7GuLsckr9CuTATuYzHc3d4gGrrC1PBwXklyfS4PBBLRKJ/a9qVFVFVW5uhOSZGsp11TW12tB0GE4O3dVF+vF0FESYa0OHQlxsDAIE+eAPFu6xnslQMPAAAAAElFTkSuQmCC\"\r\nalt=\"bones\"\r\n/>*/\r\n\r\n//abberant spectre elite rarity is 1 from api..\r\n//deal with rarity 1 that's not the FIRST item in the drop array abberant, kree\r\n\r\n//idea: iterate through the drops array adding all rarity 1s,\r\n//then iterate again attempting to roll for each drop?\r\n//refactor the whole loop again, 2 for loops returning newLoot at the very end, after the first drop in the second array\r\n\r\n//get high alch value, set to price if undefined\r\n//along with the icon when getting item api\r\n\r\n//change switch and buttons to bootstrap\r\n\r\nconst Loot = ({ drops }) => {\r\n  const [loot, setLoot] = useState([])\r\n  const [counter, setCounter] = useState(0) //Killed x amount of times\r\n  let autokill = false\r\n  const [multiplier, setMultiplier] = useState(1)\r\n\r\n  //on click generate loot\r\n  //test this function\r\n  const rollQuantity = (monsterQuantity, currQuantity) => {\r\n    const lowHigh = monsterQuantity.split(\"-\")\r\n    if (lowHigh.length === 1) {\r\n      return monsterQuantity //convert to int?\r\n    } else {\r\n      const min = parseInt(lowHigh[0])\r\n      const max = parseInt(lowHigh[1])\r\n\r\n      //random int between low and high\r\n      return (\r\n        parseInt(currQuantity.quantity) +\r\n        Math.floor(Math.random() * (max - min + 1) + min)\r\n      )\r\n    }\r\n  }\r\n\r\n  const generateLoot = (drops) => {\r\n    //subtract roll to\r\n    let existedLoot\r\n    let newLoot = loot //do not mutate state directly\r\n    let updatedQuantity\r\n    let stillSearching = null //checks if a loot has been found yet\r\n    let tempCounter = counter\r\n    for (let multi = 0; multi < multiplier; multi++) {\r\n      tempCounter += 1\r\n      //too slow with full object? {id, quality}\r\n      setLoot((prevLoot) => {\r\n        stillSearching = null\r\n        //first loop, check for all rarity --- 1, and add to or update newLoot\r\n        for (let i = 0; i < drops.length; i++) {\r\n          if (drops[i].rarity === 1) {\r\n            //skip reward casket (aberrant spectre)\r\n            if (drops[i].name.includes(\"Reward casket\")) {\r\n              //console.log(\"hit\")\r\n              continue\r\n            }\r\n            existedLoot = prevLoot.find((l) => l.id === drops[i].id) //check if already exists\r\n\r\n            if (existedLoot) {\r\n              //cover the case if the rarity === 1 loot is singular or a range\r\n              if (drops[i].quantity.includes(\"-\")) {\r\n                updatedQuantity = rollQuantity(drops[i].quantity, existedLoot)\r\n              } else {\r\n                updatedQuantity =\r\n                  parseInt(rollQuantity(drops[i].quantity, existedLoot)) +\r\n                  parseInt(existedLoot.quantity)\r\n              }\r\n              const updatedLoot = {\r\n                ...existedLoot,\r\n                quantity: updatedQuantity,\r\n              }\r\n\r\n              //replace updated loot\r\n              newLoot = newLoot.map((loo) =>\r\n                loo.id !== drops[i].id ? loo : updatedLoot\r\n              )\r\n            } else {\r\n              // first time\r\n              //roll quantity\r\n              const updatedQuantity = rollQuantity(drops[i].quantity, drops[i])\r\n              const updatedLoot = {\r\n                ...drops[i],\r\n                quantity: updatedQuantity,\r\n              } //update new quantity for loot\r\n              newLoot = [...newLoot, updatedLoot]\r\n            }\r\n          }\r\n          //if havent rolled an item yet\r\n          if (stillSearching !== null) {\r\n            break\r\n          }\r\n          if (stillSearching === null && drops[i].rarity !== 1) {\r\n            const random = Math.random() //rarity roll for each item\r\n            if (random <= drops[i].rarity) {\r\n              existedLoot = prevLoot.find((l) => l.id === drops[i].id) //check if already exists\r\n              //handle rolls\r\n              //detect if drop already exists in loot array, add quantity to it, else create new drop with quantity\r\n              if (existedLoot) {\r\n                if (drops[i].quantity.includes(\"-\")) {\r\n                  updatedQuantity = rollQuantity(drops[i].quantity, existedLoot)\r\n                } else {\r\n                  updatedQuantity =\r\n                    parseInt(rollQuantity(drops[i].quantity, existedLoot)) +\r\n                    parseInt(existedLoot.quantity)\r\n                }\r\n                const updatedLoot = {\r\n                  ...existedLoot,\r\n                  quantity: updatedQuantity,\r\n                }\r\n\r\n                //replace updated loot\r\n                newLoot = newLoot.map((loo) =>\r\n                  loo.id !== drops[i].id ? loo : updatedLoot\r\n                )\r\n              } else {\r\n                //first time drop appears in loot array\r\n                const updatedQuantity = rollQuantity(\r\n                  drops[i].quantity,\r\n                  drops[i]\r\n                )\r\n                const updatedLoot = {\r\n                  ...drops[i],\r\n                  quantity: updatedQuantity,\r\n                } //update new quantity for loot\r\n                //newLoot.push(updatedLoot)\r\n                newLoot = [...newLoot, updatedLoot]\r\n              }\r\n              stillSearching = drops[i]\r\n            }\r\n          }\r\n        }\r\n        //console.log(stillSearching)\r\n        setCounter(tempCounter)\r\n        return newLoot\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleMultiplier = (event) => {\r\n    setMultiplier(event.target.value)\r\n  }\r\n\r\n  //convert text\r\n  //change classname to green, yellow, white etc.\r\n  const convertQuantity = (quantity) => {\r\n    if (quantity < 100000) {\r\n      return quantity\r\n    } else if (quantity >= 100000 && quantity < 1000000) {\r\n      return Math.floor(quantity / 1000)\r\n        .toString()\r\n        .concat(\"K\")\r\n    } else if (quantity >= 1000000) {\r\n      return Math.floor(quantity / 100000)\r\n        .toString()\r\n        .concat(\"m\")\r\n    }\r\n  }\r\n\r\n  //doesnt work, turns off immediately\r\n  console.log(autokill)\r\n  if (autokill) setTimeout(() => document.getElementById(\"kill\").click(), 150)\r\n  //can turn values on or off with conditional -> {drop.price * drop.quantity}\r\n  return (\r\n    <div>\r\n      <div className=\"monster container\">\r\n        <p>Killed {counter}x times</p>\r\n\r\n        <div class=\"form-check form-switch\">\r\n          <input\r\n            class=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            id=\"autokillSwitch\"\r\n            value={autokill}\r\n            onChange={() => (autokill = !autokill)}\r\n          />\r\n          <label class=\"form-check-label\" for=\"autokillSwitch\">\r\n            Autokill\r\n          </label>\r\n        </div>\r\n        <br></br>\r\n        <label htmlFor=\"multiplierSlider\" class=\"form-label\">\r\n          Multiplier\r\n        </label>\r\n        <input\r\n          type=\"range\"\r\n          class=\"form-range\"\r\n          min=\"1\"\r\n          max=\"500\"\r\n          value={multiplier}\r\n          id=\"multiplierSlider\"\r\n          onChange={handleMultiplier}\r\n        />\r\n\r\n        <br></br>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          id=\"kill\"\r\n          onClick={() => generateLoot(drops)}\r\n        >\r\n          Kill {multiplier} {multiplier === 1 ? \"time\" : \"times\"}\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-danger\"\r\n          onClick={() => {\r\n            setCounter(0)\r\n            setLoot([])\r\n          }}\r\n        >\r\n          Reset loot\r\n        </button>\r\n        {/* <Button color=\"black\" onClick={() => setShowPrice(!showPrice)}>\r\n          show /hideprice\r\n        </Button> change this to switch actually*/}\r\n      </div>\r\n      <div>\r\n        {loot\r\n          .sort((a, b) => {\r\n            return b.price * b.quantity - a.price * a.quantity\r\n          })\r\n          .map((drop) => (\r\n            // quantityDisplay function here, converting 100,000 to 100k\r\n\r\n            <div key={drop.id} className=\"lootText\">\r\n              <p>\r\n                {drop.name} {convertQuantity(drop.quantity)}\r\n              </p>\r\n              <img\r\n                src={`https://chisel.weirdgloop.org/static/img/osrs-sprite/${drop.id}.png`}\r\n                alt=\"drop pic\"\r\n              />\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loot\r\n\r\n/*\r\nconst handleClick = (drops) => {\r\n    //console.log(\"generate loot\")\r\n    //too slow with full bject? just make it contain id and quantity\r\n    drops.every((drop) => {\r\n      console.log(drop.name, drop.rarity)\r\n      //console.log(drop.name, drop.rarity)\r\n      const random = Math.random() //roll for each item\r\n      if (random <= drop.rarity) {\r\n        console.log(true)\r\n      }\r\n      console.log(random)\r\n      if (drop.rarity === 1) {\r\n        setLoot(loot.concat(drop))\r\n        //detect if drop already exists in loot array, add quantity to it, else create new drop with quantity\r\n        //make it drop all the following loops?\r\n        existedLoot = loot.find((l) => l.id === drop.id) //check if already exists\r\n        if (existedLoot) {\r\n          //roll the quantity here\r\n          const updatedQuantity =\r\n            parseInt(existedLoot.quantity) + parseInt(drop.quantity)\r\n          const updatedLoot = {\r\n            ...existedLoot,\r\n            quantity: updatedQuantity.toString(),\r\n          }\r\n          // const updatedLootage = { id: loot.id, quantity: updatedQuantity } //just id and quantity?\r\n          console.log(\"updated\", updatedLoot)\r\n\r\n          //replace updated lootage\r\n          //doesnt update currently\r\n          setLoot(loot.map((loo) => (loo.id !== drop.id ? loo : updatedLoot)))\r\n          // setLoot((oldLoot) => [...oldLoot, drop])\r\n        } else {\r\n          console.log(\"first entry\", drop)\r\n          //roll quantity\r\n          setLoot((loot) => [...loot, drop])\r\n        }\r\n\r\n        return true //continue loop\r\n      } else if (random <= drop.rarity) {\r\n        //handle quantity handle rolls\r\n        //detect if drop already exists in loot array, add quantity to it, else create new drop with quantity\r\n        setLoot(loot.concat(drop))\r\n        return false //break out of loop\r\n      }\r\n      return true\r\n    })\r\n  }\r\n  */\r\n","import React from \"react\"\r\nimport Loot from \"./Loot\"\r\n\r\nconst Monster = ({ monster }) => {\r\n  const imgSrc = `/monsterImages/${monster.id}_288.png`\r\n  // monster image\r\n  return (\r\n    <div>\r\n      <div className=\"monster\">\r\n        <h1>{monster.name}</h1>\r\n        <img className=\"monsterImage\" src={imgSrc} alt=\"monster pic\" />\r\n        <p>{monster.examine}</p>\r\n        <h2>Loot</h2>\r\n      </div>\r\n\r\n      <Loot key={monster.id} drops={monster.drops} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Monster\r\n","import React from \"react\"\r\nimport Monster from \"./Monster\"\r\n\r\nconst MonsterModal = ({ monster }) => {\r\n  return (\r\n    <div\r\n      id={`id${monster.id}`}\r\n      class=\"modal fade\"\r\n      role=\"dialog\"\r\n      aria-labelledby=\"monster\"\r\n      aria-hidden=\"true\"\r\n    >\r\n      <div class=\"modal-dialog modal-fullscreen\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header text-center\">\r\n            <button type=\"button\" class=\"close\" data-bs-dismiss=\"modal\">\r\n              &lt;\r\n            </button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <Monster monster={monster} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MonsterModal\r\n","import React from \"react\"\r\nimport MonsterModal from \"./MonsterModal\"\r\nimport LazyLoad from \"react-lazyload\"\r\n//lazyload doesnt seem to help (initial loading)?\r\n\r\n//need to dynamically render this\r\n\r\nconst Tiles = ({ monsters }) => {\r\n  //   const monsterName = monsters.map((monster) => {\r\n  //     return { ...monster, name: monster.name.replace(/ /g, \"&nbsp;\") }\r\n  //   })\r\n\r\n  //   console.log(monsterName)\r\n  return (\r\n    <div class=\"row row-cols-9 gx-2 gy-2\">\r\n      {monsters.map((monster) => (\r\n        <div class=\"col\" key={monster.id}>\r\n          <div class=\"card\">\r\n            <a\r\n              href={`${monster.id}`}\r\n              class=\"stretched-link\"\r\n              data-bs-target={`#id${monster.id}`}\r\n              data-bs-toggle=\"modal\"\r\n            >\r\n              <img\r\n                src={`/monsterImages/${monster.id}_288.png`}\r\n                class=\"card-img-top\"\r\n                alt=\"...\"\r\n                className=\"cardImage\"\r\n              />\r\n              <div class=\"card-body\">\r\n                <h5 class=\"card-title\">{monster.name}</h5>\r\n              </div>\r\n            </a>\r\n          </div>\r\n          <MonsterModal monster={monster} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tiles\r\n","import React from \"react\"\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div>\r\n      <nav class=\"navbar navbar-dark bg-secondary\">\r\n        <div class=\"container-fluid\">\r\n          <button\r\n            class=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseBar\"\r\n            aria-controls=\"collapse\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n        </div>\r\n      </nav>\r\n      <div class=\"collapse\" id=\"collapseBar\">\r\n        <div class=\"bg-secondary p-4\">\r\n          <a class=\"text-white\" href=\"http://localhost:3000/\">\r\n            Monsters\r\n          </a>\r\n          <br></br>\r\n          <a class=\"text-white\" href=\"https://github.com/minh-v/osrs-simu\">\r\n            Github\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState, useEffect } from \"react\"\r\nimport Tiles from \"./components/Tiles\"\r\nimport Navbar from \"./components/Navbar\"\r\n//import monsterService from \"./services/monsters\"\r\n\r\n//LESSON LEARNED: DO NOT ASSUME API PATTERNS IMMEDIATELY, WILL NEED TO DEAL WITH NICHE API\r\n\r\n//https://prices.runescape.wiki/api/v1/osrs/latest GET ITEM PRICES FROM HERE TO SORT BY\r\n//fetch item api\r\n//fetch monster api\r\n\r\nimport { gql, useLazyQuery } from \"@apollo/client\"\r\n\r\nconst MONSTERS = gql`\r\n  query {\r\n    monsters {\r\n      name\r\n      id\r\n      drops {\r\n        id\r\n        name\r\n        quantity\r\n        rarity\r\n        rolls\r\n        price\r\n      }\r\n      examine\r\n    }\r\n  }\r\n`\r\n\r\nconst App = () => {\r\n  //const [monsters, setMonsters] = useState([]) //objects of all the monsters\r\n  //const [loaded, setLoaded] = useState(false)\r\n  //const [selected, setSelected] = useState([])\r\n  const [search, setSearch] = useState([])\r\n  const [getMonsters, { loading, error, data }] = useLazyQuery(MONSTERS)\r\n  //let monstersToShow\r\n  const handleSearch = (event) => {\r\n    setSearch(\r\n      data.monsters.filter((monster) =>\r\n        monster.name.toLowerCase().includes(event.target.value.toLowerCase())\r\n      )\r\n    )\r\n  }\r\n\r\n  //only want to call query on the first render\r\n  useEffect(() => {\r\n    getMonsters()\r\n  }, [])\r\n\r\n  // useEffect(() => {\r\n  //   setSelected(monsters[0])\r\n  // }, [monsters])\r\n\r\n  if (loading || !data) {\r\n    //center spinner\r\n    return (\r\n      <div class=\"d-flex justify-content-center\">\r\n        <div class=\"spinner-border \" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  //search filter\r\n  const monstersToShow = search.length === 0 ? data.monsters : search\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div class=\"container bg-dark\">\r\n        <form>\r\n          <input\r\n            onChange={handleSearch}\r\n            placeholder=\"search monster\"\r\n            className={\"searchBar\"}\r\n          />{\" \"}\r\n        </form>\r\n        {/* {selected && <Monster monster={selected} />} */}\r\n        <Tiles monsters={monstersToShow} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","export default __webpack_public_path__ + \"static/media/osrs-font.16833a5f.woff\";","import ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./index.css\"\nimport \"./fonts/osrs-font.woff\"\n\nimport {\n  ApolloClient,\n  ApolloProvider,\n  HttpLink,\n  InMemoryCache,\n} from \"@apollo/client\"\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"https://immense-ridge-37267.herokuapp.com/graphql\",\n  }),\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}